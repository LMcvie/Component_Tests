{"version":3,"sources":["components/ProgressBar.js","components/Pages/ProgressBarPage.js","components/Slider.js","components/Pages/SliderPage.js","components/Pages/SpiderChartPage.js","components/NavBar.js","components/Pages/ErrorPage.js","App.js","registerServiceWorker.js","index.js"],"names":["ProgressBar","props","useState","completed","setCompleted","useEffect","setInterval","Math","floor","random","bgcolor","fillerStyles","height","width","backgroundColor","transition","borderRadius","textAlign","style","margin","padding","color","fontWeight","ProgressBarPage","className","map","item","idx","Slider","defaultValue","text","slider","document","getElementById","id","type","min","max","step","onChange","event","innerHTML","value","x","gradientColor","background","SliderPage","QuestionList","SpiderChartPage","NavBar","to","ErrorPage","App","path","element","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a7068d98.chunk.js","sourcesContent":["import {useState, useEffect}  from 'react';\n\nconst ProgressBar = (props) => {\n\n\n  const [completed, setCompleted] = useState(0);\n\n  useEffect(() => {\n    setInterval(() => setCompleted(Math.floor(Math.random() * 100) + 1), 2000);\n  }, []);\n\n\n  \n  const { bgcolor } = props;\n\n  const containerStyles = {\n    height: 20,\n    width: '50%',\n    backgroundColor: \"#e0e0de\",\n    borderRadius: 50,\n    margin: 50\n  }\n\n  const fillerStyles = {\n    height: '100%',\n    width: `${completed}%`,\n    backgroundColor: bgcolor,\n    transition: 'width 1s ease-in-out',\n    borderRadius: 'inherit',\n    textAlign: 'right'\n  }\n\n  const labelStyles = {\n    padding: 5,\n    color: 'white',\n    fontWeight: 'bold'\n  }\n\n  return (\n    <div style={containerStyles}>\n      <div style={fillerStyles}>\n        <span style={labelStyles}>{`${completed}%`}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;","import React from \"react\";\nimport ProgressBar from \"../ProgressBar\";\n\nconst ProgressBarPage = () => {\n  \nconst testData = [\n  { bgcolor: \"#6a1b9a\", completed: 60 },\n  { bgcolor: \"#00695c\", completed: 30 },\n  { bgcolor: \"#ef6c00\", completed: 53 },\n];\n\n\n  return (\n    <div className=\"App\">\n      {testData.map((item, idx) => (\n        <ProgressBar key={idx} bgcolor={item.bgcolor} completed={item.completed} />\n      ))}\n    </div>\n  );\n\n}\nexport default ProgressBarPage;\n","import { useState, useEffect } from 'react';\nimport \"../components/Slider.css\";\n\n\nconst Slider = ({ defaultValue, text }) => {\n    let slider = document.getElementById(\"myRange\");\n    let output = document.getElementById(\"value\");\n\n\n\n    const setSliderAttributes = () => {\n\n        slider = document.getElementById(\"myRange\");\n        output = document.getElementById(\"value\");\n\n\n\n        output.innerHTML = slider.value;\n\n    }\n\n    const handleChange = (event) => {\n        setSliderAttributes();\n        let x = slider.value;\n        let gradientColor = `255,0,0`;\n        if (x >= 25 && x <= 50) gradientColor = '215,140,0';\n        if (x >= 50 && x <= 75) gradientColor = '255,165,0';\n        if (x >= 75 && x < 100) gradientColor = '255,215,0';\n        if (x === 100) gradientColor = '166,214,8';\n        var color = `linear-gradient(90deg,rgb(${gradientColor})` + x + '%, rgb(214,214,214)' + x + '%)';\n        slider.style.background = color;\n\n    }\n\n    return (\n        <div id='color-test'>\n            <input type=\"range\" id=\"myRange\" className=\"slider\" min=\"0\" max=\"100\" defaultValue={defaultValue} step=\"1\" onChange={handleChange}></input>\n            <p>Value: <span id=\"value\"></span></p>\n            <p>{text}</p>            \n        </div>\n    );\n\n}\n\n\n\nexport default Slider;","import React from \"react\";\nimport Slider from \"../Slider\";\n\nconst SliderPage = () => {\n\n  const QuestionList= [ <Slider defaultValue = '0' key = '0'text = 'How comfortable are you with CSS?'/>, <Slider defaultValue = '50' key = '1' text = 'How comfortable are you working on release?'/>];\n\n  return (\n  <div>\n    <h4>Slider Page</h4>\n   {QuestionList}\n    </div>\n\n  );\n}\n\nexport default SliderPage;\n","import React from \"react\";\n\n\nconst SpiderChartPage = () => {\n\n  return (\n    <div>\n      <h4>INSERT CHART HERE</h4>\n    </div>\n  );\n\n}\n\nexport default SpiderChartPage;\n","import {Link} from \"react-router-dom\";\n\nconst NavBar = () => {\n\n  return(\n      //simple a href links to the different pages\n    <ul>\n      <li>\n        <Link to=\"/\">ProgressBar</Link>\n      </li>\n      <li>\n        <Link to=\"/about\">Slider</Link>\n      </li>\n      <li>\n        <Link to=\"/pricing\">SpiderChart</Link>\n      </li>\n    </ul>\n  )\n\n}\n\nexport default NavBar;","const ErrorPage = () => {\n    return(\n        <h1> 404 - Page Not Found!</h1>\n    )\n}\n\nexport default ErrorPage;\n\n","\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport ProgressBarPage from './components/Pages/ProgressBarPage';\nimport SliderPage from './components/Pages/SliderPage';\nimport SpiderChartPage from './components/Pages/SpiderChartPage';\nimport NavBar from './components/NavBar';\nimport ErrorPage from './components/Pages/ErrorPage';\n\nconst App = ()=> {\n\n  return (\n\n    //new way of doing router stuff\n    <>\n      <Router>\n        <NavBar/>\n        <Routes>\n          <Route path=\"/\" element={<ProgressBarPage/>}/>\n          <Route path =\"/about\" element ={<SliderPage/>}/>\n          <Route path =\"/pricing\" element = {<SpiderChartPage/>}/>\n          <Route path ='/*' element ={<ErrorPage/>}/> \n        </Routes>\n      </Router>\n    </>\n  )\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}