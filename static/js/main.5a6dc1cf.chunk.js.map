{"version":3,"sources":["components/ProgressBar.js","components/Pages/ProgressBarPage.js","components/Slider.js","components/Pages/SliderPage.js","components/Pages/SpiderChartPage.js","components/NavBar.js","components/Pages/ErrorPage.js","App.js","registerServiceWorker.js","index.js"],"names":["ProgressBar","props","useState","completed","setCompleted","useEffect","bgcolor","fillerStyles","height","width","backgroundColor","transition","borderRadius","textAlign","style","margin","padding","color","fontWeight","ProgressBarPage","className","map","item","idx","Slider","slider","x","question","id","sliderID","valueID","window","addEventListener","event","defaultValue","document","getElementById","innerHTML","setSliderColor","gradientColor","background","type","min","max","step","onChange","value","console","log","text","SliderPage","QuestionList","index","SpiderChartPage","ResponsiveContainer","aspect","RadarChart","cx","cy","outerRadius","data","name","series1","series2","PolarGrid","PolarAngleAxis","dataKey","PolarRadiusAxis","angle","domain","Radar","stroke","fill","fillOpacity","Legend","NavBar","to","ErrorPage","App","path","element","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5a6dc1cf.chunk.js","sourcesContent":["import {useState, useEffect}  from 'react';\n\nconst ProgressBar = (props) => {\n\n\n  const [completed, setCompleted] = useState(0);\n\n  useEffect(() => {\n    setCompleted(props.completed);\n  }, []);\n\n\n  \n  const { bgcolor } = props;\n\n  const containerStyles = {\n    height: 20,\n    width: '50%',\n    backgroundColor: \"#e0e0de\",\n    borderRadius: 50,\n    margin: 50\n  }\n\n  const fillerStyles = {\n    height: '100%',\n    width: `${completed}%`,\n    backgroundColor: bgcolor,\n    transition: 'width 1s ease-in-out',\n    borderRadius: 'inherit',\n    textAlign: 'right'\n  }\n\n  const labelStyles = {\n    padding: 5,\n    color: 'white',\n    fontWeight: 'bold'\n  }\n\n  return (\n    <div style={containerStyles}>\n      <div style={fillerStyles}>\n        <span style={labelStyles}>{`${completed}%`}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;","import React from \"react\";\nimport ProgressBar from \"../ProgressBar\";\n\nconst ProgressBarPage = () => {\n  \nconst testData = [\n  { bgcolor: \"#6a1b9a\", completed: 60 },\n  { bgcolor: \"#00695c\", completed: 30 },\n  { bgcolor: \"#ef6c00\", completed: 53 },\n];\n\n\n  return (\n    <div className=\"App\">\n      {testData.map((item, idx) => (\n        <ProgressBar key={idx} bgcolor={item.bgcolor} completed={item.completed} />\n      ))}\n    </div>\n  );\n\n}\nexport default ProgressBarPage;\n","import \"../components/Slider.css\";\n\n\nconst Slider = ({ question,id }) => {\n    const sliderID = `slider${id}`;\n    const valueID = `value${id}`;\n    let slider;\n    let x;\n    let output;\n\n    window.addEventListener('DOMContentLoaded', (event) => {\n        x= question.defaultValue;\n        output = document.getElementById(`${valueID}`);\n        output.innerHTML = question.defaultValue;\n        setSliderColor();\n    });\n\n\n    const setSliderColor= () => {\n        slider = document.getElementById(`${sliderID}`);\n        if( slider === null) return;\n        let gradientColor = `255,0,0`;\n        if (x >= 25 && x <= 50) gradientColor = '215,140,0';\n        if (x >= 50 && x <= 75) gradientColor = '255,165,0';\n        if (x >= 75 && x < 100) gradientColor = '255,215,0';\n        if (x === 100) gradientColor = '166,214,8';\n        let color = `linear-gradient(90deg,rgb(${gradientColor})` + x + '%, rgb(214,214,214)' + x + '%)';\n        slider.style.background = color;\n    }\n\n\n    const handleChange = (event) => {\n        x = slider.value;\n        console.log(id);\n        setSliderColor();\n        output = document.getElementById(`${valueID}`);\n        output.innerHTML = slider.value;\n\n    }\n\n    return (\n        <div id='question-div'>\n            <input type=\"range\" id={sliderID} className=\"slider\" min=\"0\" max=\"100\" defaultValue={question.defaultValue} step=\"1\" onChange={handleChange} ></input>\n            <p>Value: <span id={valueID}></span></p>\n            <p>{question.text}</p>            \n        </div>\n    );\n\n}\n\n\n\nexport default Slider;","import React from \"react\";\nimport Slider from \"../Slider\";\n\nconst SliderPage = () => {\n\n\n\n  const questions = \n  [\n    {\n      defaultValue: '0',\n      text: 'How confident are you with CSS?'\n  \n    },\n    {\n      defaultValue: '50',\n      text: 'How confident are you working on release?'\n    },\n    {\n      defaultValue:'80',\n      text:'How confident are you with react router'\n    }\n\n  ]\n\n  const QuestionList = questions.map((question,index) => {\n    return (\n        <Slider question = {question} key = {index} id= {index}></Slider>\n    );\n});\n\n\n  return (\n  <div>\n    <h4>Slider Page</h4>\n   {QuestionList}\n    </div>\n\n  );\n}\n\nexport default SliderPage;\n","import React from \"react\";\nimport { Radar, RadarChart, PolarGrid, Legend, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer } from 'recharts';\n\n\nconst SpiderChartPage = () => {\n\n\n//pass in the datasets then loop through and add a key to data with the persons results\n  const data = [\n    { name: 'React Router', series1: 68, series2:54 },\n    { name: 'Release', series1: 43, series2:23 },\n    { name: 'useEffect', series1: 87, series2:59 },\n    { name: 'TTD', series1: 22, series2:78 },\n    { name: 'Using sandbox', series1: 66, series2:89 },\n    { name: 'HTML', series1: 68, series2:33 },\n    { name: 'CSS' , series1: 31, series2:44},\n    { name: 'useState' , series1: 72, series2:82},\n    { name: 'API calls' , series1: 88, series2:60},\n  ];\n\n  // const RadarList = data.map((data, index) => {\n  //   return (\n  //     <></>// <Radar name = /Radar>\n  //   );\n  // });\n\n  return (\n    <div>\n      <h2> Capability</h2>\n      <ResponsiveContainer width=\"100%\" aspect=\"2\">\n        <RadarChart cx=\"50%\" cy=\"50%\" outerRadius=\"80%\" data={data}>\n          <PolarGrid />\n          <PolarAngleAxis dataKey=\"name\" />\n          <PolarRadiusAxis angle={0} domain={[0, 100]} />\n          <Radar name=\"Danny\" dataKey=\"series1\" stroke=\"Green\"\n            fill='green' fillOpacity={0.5} />\n          <Radar name=\"Mark\" dataKey=\"series2\" stroke=\"Blue\"\n            fill='blue' fillOpacity={0.5} />\n          <Legend />\n        </RadarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n\n}\n\nexport default SpiderChartPage;\n","import {Link} from \"react-router-dom\";\n\nconst NavBar = () => {\n\n  return(\n      //simple a href links to the different pages\n    <ul>\n      <li>\n        <Link to=\"/\">ProgressBar</Link>\n      </li>\n      <li>\n        <Link to=\"/Slider\">Slider</Link>\n      </li>\n      <li>\n        <Link to=\"/Spider\">SpiderChart</Link>\n      </li>\n    </ul>\n  )\n\n}\n\nexport default NavBar;","const ErrorPage = () => {\n    return(\n        <h1> 404 - Page Not Found!</h1>\n    )\n}\n\nexport default ErrorPage;\n\n","\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport ProgressBarPage from './components/Pages/ProgressBarPage';\nimport SliderPage from './components/Pages/SliderPage';\nimport SpiderChartPage from './components/Pages/SpiderChartPage';\nimport NavBar from './components/NavBar';\nimport ErrorPage from './components/Pages/ErrorPage';\n\n\nconst App = ()=> {\n\n  return (\n\n    //new way of doing router stuff\n    <>\n      <Router>\n        <NavBar/>\n        <Routes>\n          <Route path=\"/Compontent_Tests\" element={<SliderPage/>}/>\n          <Route path =\"/Compontent_Tests/Progress\" element ={<ProgressBarPage/>}/>\n          <Route path =\"/Compontent_Tests/Spider\" element = {<SpiderChartPage/>}/>\n          <Route path ='/*' element ={<ErrorPage/>}/> \n        </Routes>\n      </Router>\n    </>\n  )\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}